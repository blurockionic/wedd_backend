import { z } from "zod";


// 

export const passwordValidation = z
  .string()
  .min(8, "Password must be at least 8 characters long")
  .regex(/[a-z]/, "Password must include at least one lowercase letter")
  .regex(/[A-Z]/, "Password must include at least one uppercase letter")
  .regex(/\d/, "Password must include at least one number")
  .regex(/[!@#$%^&*]/, "Password must include at least one special character");

// Define the schema for user validation

export const userSchema = z.object({
  id: z.string().uuid().optional(), // Automatically generated by Prisma, usually not required in input
  email: z.string().email("Invalid email address").transform((val) => val.toLowerCase()),
   refresh_Token: z.string().optional(),
  password: passwordValidation,
  resetPasswordToken: z.string().optional(), // Optional for reset password functionality
  resetPasswordExpire: z.string().optional(), // Optional for reset password functionality
  first_name: z.string().min(1, "First name is required").transform((val) => val?.toLowerCase()),
  last_name: z.string().min(1, "Last name is required").transform((val) => val?.toLowerCase()),
  phone_number: z
    .string()
    .regex(/^\d{10}$/, "Phone number must be exactly 10 digits"), // Modify as per your phone validation requirements
    role: z.enum(["USER", "ADMIN"]).transform((val) => val.toLowerCase()),
    wedding_date: z.string().datetime().optional(), // Optional and should be a valid ISO date-time string
  wedding_location: z.string().optional().transform((val) => val?.toLowerCase()), // Optional string
  created_at: z.string().datetime().optional(), // Auto-generated by Prisma
});


export const updateUserSchema = z.object({
  first_name: z.string().optional().transform((val) => val?.toLowerCase()),
  last_name: z.string().optional().transform((val) => val?.toLowerCase()),
  phone_number: z.string().optional(), // Phone numbers typically don't need transformations
  wedding_date: z.string().optional(), // Dates are usually in ISO format, no transformation required
  wedding_location: z.string().optional().transform((val) => val?.toLowerCase()),
});


// Schema for user login
export const loginSchema = z.object({
  email:z.string().email("Invalid email address").transform((val) => val.toLowerCase()),
  password: z.string().min(8, "Password must be at least 8 characters long"),
});

// Schema for password reset

export const resetTokenSchema = z.object({
  token: z.string().min(1, "Password must be at least 8 characters long"),
});

// Schema for password reset

export const resetPasswordSchema = z.object({
  password: passwordValidation,
});

export const requestPasswordResetSchema = z.object({
  email: z.string().email("Invalid email address").transform((val) => val.toLowerCase()),
});
