generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_DATABASE_URL")
}

model Vendor {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  business_name     String
  business_category String
  license_number    String?  
  service_type      String[]          @default([]) // Ensure default value for arrays
  description       String            // Detailed description of the business
  logo_url          String?
  location          String?
  email             String            @unique
  password_hash     String
  phone_number      String 
  map_location      Json
  social_networks   Json?
  services          Service[]         @relation("VendorServices")  // One-to-many relation
  promotions        Promotion[]       // One-to-many relation
  team_members      TeamMember[]      // One-to-many relation
  faqs              FAQ[]             // One-to-many relation
  reviews           Review[]  
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  is_verified       Boolean             @default(false)
  refresh_Token        String?  
  resetPassword_Token  String?
}

model Service {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String           @db.ObjectId
  vendor         Vendor           @relation("VendorServices", fields: [vendorId], references: [id])
  service_name   String
  description    String
  price          Float
  service_type   String
  availabilities Availability[]
  media          Media[]
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
}

model Availability {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String   @db.ObjectId
  service        Service  @relation(fields: [serviceId], references: [id])
  available_date DateTime
  wedding_date   DateTime
  is_available   Boolean
  created_at     DateTime @default(now())
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String   @db.ObjectId
  service     Service  @relation(fields: [serviceId], references: [id])
  image_urls  String[]
  video_urls  String[]
  uploaded_at DateTime @default(now())
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  position    String
  bio         String
  email       String
  photo_url   String?
  social_links Json?
  created_at  DateTime @default(now())
}

model Promotion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String   @db.ObjectId
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  promotion_title     String
  description         String
  discount_percentage Float  @default(0)
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime @default(now())
}

model FAQ {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  question    String
  answer      String?
  created_at  DateTime @default(now())
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  userId      String   // ID of the user who submitted the review
  rating      Int      @default(0) // Rating out of 5
  comment     String?  // Optional user comment
  created_at  DateTime @default(now())
}
