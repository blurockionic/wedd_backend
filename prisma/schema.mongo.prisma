generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_DATABASE_URL")
}

model Vendor {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  business_name       String
  business_category   String
  license_number      String?
  service_type        String[]     @default([]) // Ensure default value for arrays
  description         String // Detailed description of the business
  logo_url            Json?
  country             String?
  state               String?
  latitude            String?
  longitude           String?
  city                String?
  email               String       @unique
  password_hash       String
  phone_number        String
  social_networks     Json?
  services            Service[]    @relation("VendorServices") // One-to-many relation
  promotions          Promotion[] // One-to-many relation
  team_members        TeamMember[] // One-to-many relation
  faqs                Json?
  created_at          DateTime     @default(now())
  updated_at          DateTime     @updatedAt
  is_verified         Boolean      @default(false)
  refresh_Token       String?
  resetPassword_Token String?
  role                String       @default("vendor") @db.String
  payment             Payment[]

  Subscription Subscription[]
}

model Service {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String         @db.ObjectId
  vendor         Vendor         @relation("VendorServices", fields: [vendorId], references: [id], onDelete: Cascade)
  service_name   String
  description    String
  min_price      Float?
  max_price      Float?
  price          Float?
  service_type   String
  rating         Float          @default(0.0)
  availabilities Availability[]
  feedback       Feedback[]
  media          Media[]        @relation("ServiceToMedia")
  views          Views[]
  faqs           Json?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([service_type], map: "idx_service_type")
}

model Views {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String   @db.ObjectId
  userId     String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  viewCount  Int      @default(1)
  lead       Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([serviceId, userId])
  @@index([serviceId])
}

model Feedback {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  serviceId  String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  comment    String
  rating     Float
  user_name  String   @default("")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([serviceId, userId])
  @@index([serviceId]) //index for lookup
}

model Availability {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String   @unique @db.ObjectId
  service        Service  @relation(fields: [serviceId], references: [id])
  available_date DateTime
  wedding_date   DateTime
  is_available   Boolean
  created_at     DateTime @default(now())
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String   @unique
  service     Service  @relation(fields: [serviceId], references: [id], name: "ServiceToMedia")
  image_urls  Json
  video_urls  Json
  uploaded_at DateTime @default(now())
}

model TeamMember {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId     String   @db.ObjectId
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
  name         String
  position     String
  bio          String
  email        String
  photo_url    String?
  social_links Json?
  created_at   DateTime @default(now())
}

model Promotion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String   @db.ObjectId
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  promotion_title     String
  description         String
  discount_percentage Float    @default(0)
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime @default(now())
}

model Plan {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String // Name of the plan (e.g., "Basic", "Premium")
  price         Float // Monthly or yearly cost
  duration      String // Duration of the plan (e.g., "1 month", "1 year")
  description   String // Description of the plan
  features      Json?
  trial_period  Int?
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                       String             @id @default(auto()) @map("_id") @db.ObjectId
  vendorId                 String?            @db.ObjectId
  vendor                   Vendor?            @relation(fields: [vendorId], references: [id])
  planId                   String             @db.ObjectId
  plan                     Plan               @relation(fields: [planId], references: [id])
  status                   SubscriptionStatus @default(PENDING)
  order_id                 String
  payment_id               String?
  payments                 Payment[]
  razorpay_subscription_id String?
  start_date               DateTime           @default(now())
  end_date                 DateTime?
  auto_renew               Boolean            @default(true)
  is_trial                 Boolean            @default(false) // Indicates if this subscription is a trial
  trial_end_date           DateTime? // End date for the trial period
  created_at               DateTime           @default(now())
  updated_at               DateTime           @updatedAt
}

model Payment {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String? @db.ObjectId
  vendor         Vendor? @relation(fields: [vendorId], references: [id])
  subscriptionId String? @db.ObjectId

  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  amount              Float // Amount paid
  currency            String // "INR", "USD", etc.
  status              PaymentStatus @default(PENDING) // "SUCCESS", "FAILED", etc.
  payment_method      String // "UPI", "card", etc.
  razorpay_payment_id String? // Razorpay payment ID
  refund_id           String? // Razorpay refund ID (if applicable)
  is_refunded         Boolean       @default(false)
  failure_reason      String? // If payment failed
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
