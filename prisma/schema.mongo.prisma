generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_DATABASE_URL")
}

model Vendor {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String            
  business_name     String
  business_category String
  license_number    String?  
  service_type      String[]          @default([]) // Ensure default value for arrays
  description       String            // Detailed description of the business
  logo_url          Json?
  country            String?
  state             String?
  latitude          String?
  longitude         String?
  city              String?
  email             String            @unique
  password_hash     String
  phone_number      String 
  social_networks   Json?
  services          Service[]           @relation("VendorServices")  // One-to-many relation
  promotions        Promotion[]       // One-to-many relation
  team_members      TeamMember[]      // One-to-many relation
  faqs              FAQ[]             // One-to-many relation
  reviews           Review[]  
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  is_verified       Boolean             @default(false)
  refresh_Token        String?  
  resetPassword_Token  String?
  role                String        @default("vendor") @db.String
}

model Service {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String           @db.ObjectId
  vendor         Vendor           @relation("VendorServices", fields: [vendorId], references: [id],onDelete: Cascade) 
  service_name   String
  description    String
  min_price      Float?
  max_price      Float?
  price          Float?           
  service_type   String
  rating         Float          @default(0.0)
  availabilities Availability[]   
  reviews        Review[]         
  media         Media[]    @relation("ServiceToMedia")      
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
   @@index([service_type], map: "idx_service_type")
}

model Availability {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String   @db.ObjectId @unique
  service        Service  @relation(fields: [serviceId], references: [id])
  available_date DateTime
  wedding_date   DateTime
  is_available   Boolean
  created_at     DateTime @default(now())
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String   @unique
  service     Service  @relation(fields: [serviceId], references: [id], name: "ServiceToMedia")
  image_urls  Json
  video_urls  Json
  uploaded_at   DateTime @default(now())
 
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  name        String
  position    String
  bio         String
  email       String
  photo_url   String?
  social_links Json?
  created_at  DateTime @default(now())
}

model Promotion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String   @db.ObjectId
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  promotion_title     String
  description         String
  discount_percentage Float  @default(0)
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime @default(now())
}

model FAQ {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  question    String
  answer      String?
  created_at  DateTime @default(now())
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  serviceId   String?  @db.ObjectId  // Service ID for reviews associated with a service
  service     Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  reviewerId  String   // ID of the user who submitted the review
  comment     String?  // Optional user comment
  type        ReviewType

  created_at  DateTime @default(now())
}


enum ReviewType {
  VENDOR
  SERVICE
}