generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo"
   datasources = [db]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_DATABASE_URL")
}

model Vendor {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  business_name     String
  business_category String
  service_type      String[]
  location          String
  email             String            @unique
  phone_number      String
  map_location      Json
  social_networks   Json?
  services          Service[]         @relation("VendorServices")  // One-to-many relation
  promotions        Promotion[]       // One-to-many relation
  team_members      TeamMember[]      // One-to-many relation
  faqs              FAQ[]             // One-to-many relation
  created_at        DateTime          @default(now())
}

model Service {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  service_name   String
  description    String
  service_type   String
  created_at     DateTime         @default(now())
  availabilities Availability[]   // One-to-many relation with Availability
  media          Media[]          // One-to-many relation with Media
  vendorId       String           @db.ObjectId       // Foreign key for Vendor
  vendor         Vendor           @relation("VendorServices", fields: [vendorId], references: [id])  // One-to-one relation to Vendor
}

model Availability {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String   @db.ObjectId
  service        Service  @relation(fields: [serviceId], references: [id])
  available_date DateTime
  wedding_date   DateTime
  is_available   Boolean
  created_at     DateTime @default(now())
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String   @db.ObjectId
  service     Service  @relation(fields: [serviceId], references: [id])
  image_urls  String[]
  video_urls  String[]
  uploaded_at DateTime @default(now())
}

model TeamMember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId   String   @db.ObjectId
  vendor     Vendor   @relation(fields: [vendorId], references: [id])
  name       String
  position   String
  bio        String
  email      String
  photo_url  String
  created_at DateTime @default(now())
}

model Promotion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String   @db.ObjectId
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  promotion_title     String
  description         String
  discount_percentage Float
  end_date            DateTime
  created_at          DateTime @default(now())
}

model FAQ {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String   @db.ObjectId
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  question    String
  answer      String?
  created_at  DateTime @default(now())
}
