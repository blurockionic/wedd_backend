generator client_postgres {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
  output        = "./generated/postgres"
  datasources   = [db_postgres]
}

datasource db_postgres {
  provider          = "postgresql"
  url               = env("POST_GRE_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL_PG")
}

model User {
  id                  String             @id @default(uuid())
  email               String             @unique
  refresh_Token       String?
  password_hash       String?
  googleUid           String?            @unique
  resetPassword_Token String?
  profile_photo       String?
  user_name           String
  phone_number        String?
  role                Role
  wedding_date        DateTime?
  wedding_location    String?
  created_at          DateTime           @default(now())
  is_verified         Boolean            @default(false)
  bookings            Booking[]
  reviews             Review[]
  cart                Cart[]
  updated_at          DateTime?
  checklists          Checklist[]        @relation(name: "UserChecklists")
  guests              Guest[]            @relation(name: "UserGuests")
  paymentDetails      PaymentDetails[]
  orderDetails        OrderDetails[]
  userDataTemplate    UserDataTemplate[]
  event               Event[]            @relation(name: "Event")
  likedBlogs          LikedBlog[] // Added relation to LikedBlog
}

model Booking {
  id               String
  userId           User     @relation(fields: [id], references: [id])
  booking_id       String   @id @default(uuid())
  service_id       String // Refers to a Service in MongoDB
  vendor_id        String // Refers to a Vendor in MongoDB
  booking_date     DateTime
  status           String   @default("pending")
  negotiated_price Float? // Agreed price after negotiation
  is_negotiable    Boolean  @default(false) // Flag for negotiation
  totalAmount      Float // Total cost of the booking
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  serviceId String // Refers to a Service in MongoDB
  createdAt DateTime @default(now()) // Timestamp when the service was added

  @@unique([userId, serviceId])
}

model Checklist {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(name: "UserChecklists", fields: [userId], references: [id])
  items     Json // Store checklist items as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id               String         @id @default(uuid())
  userId           String
  user             User           @relation(name: "Event", fields: [userId], references: [id])
  eventName        String
  eventDescription String?
  eventDate        DateTime
  eventStartTime   DateTime?
  eventEndTime     DateTime?
  eventBudget      Decimal
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  eventTask        EventTask[]
  eventVendors     EventVendors[]
  subEvent         SubEvent[]
}

model EventVendors {
  id        String   @id @default(uuid())
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  serviceId String // Refers to a Service in MongoDB
  createdAt DateTime @default(now())

  @@unique([eventId, serviceId])
}

model EventTask {
  id           String    @id @default(uuid())
  eventId      String
  name         String
  priority     String    @default("Medium") // Keep as String if you don't want to migrate
  done         Boolean   @default(false)
  scheduleDate DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  event        Event     @relation(fields: [eventId], references: [id])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model SubEvent {
  id                  String            @id @default(uuid())
  eventId             String
  event               Event             @relation(fields: [eventId], references: [id])
  subEventName        String
  subEventDescription String
  subEventBudget      Decimal
  subEventDate        DateTime
  subEventStartTime   DateTime
  subEventEndTime     DateTime
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  subEventTask        SubEventTask[]
  subEventVendors     SubEventVendors[]
}

model SubEventVendors {
  id         String   @id @default(uuid())
  subEventId String
  userId     String
  subEvent   SubEvent @relation(fields: [subEventId], references: [id])
  serviceId  String // Refers to a Service in MongoDB
  createdAt  DateTime @default(now())

  @@unique([subEventId, serviceId])
}

model SubEventTask {
  id         String   @id @default(uuid())
  userId     String
  subEventId String
  subEvent   SubEvent @relation(fields: [subEventId], references: [id])
  items      Json // Store checklist items as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrderDetails {
  id               String   @id @default(uuid())
  orderId          String   @unique // Razorpay Order ID
  amount           Float // Amount in INR
  currency         String   @default("INR")
  status           String   @default("created") // "created", "paid", "failed"
  razorpayResponse Json // Full Razorpay Order response (optional)
  createdAt        DateTime @default(now())
  userId           String
  templateId       String?

  User               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  InvitationTemplate InvitationTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model PaymentDetails {
  id               String    @id @default(uuid())
  orderId          String    @unique // Link to OrderDetails
  paymentId        String? // Razorpay Payment ID
  razorpayResponse Json // Full Razorpay Payment response
  status           String    @default("pending") // "pending", "success", "failed"
  purchasedAt      DateTime? // Payment completion time

  userId     String
  templateId String?

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  InvitationTemplate InvitationTemplate? @relation(fields: [templateId], references: [id], onDelete: Cascade)
}

model Review {
  review_id   String   @id @default(uuid())
  vendor_id   String // Refers to a Vendor in MongoDB
  id          String
  rating      Int // Rating 1 to 5
  review_text String
  created_at  DateTime @default(now())

  user User @relation(fields: [id], references: [id])
}

model EventSchedule {
  event_id         String   @id @default(uuid())
  vendor_id        String // Refers to a Vendor in MongoDB
  media_id         String // Refers to a Media in MongoDB
  event_name       String
  event_start_date DateTime
  event_end_date   DateTime
  event_location   String
  description      String
  created_at       DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Guest {
  id        String      @id @default(uuid())
  name      String
  phone     String
  status    GuestStatus @default(NOT_INVITED)
  userId    String
  user      User        @relation(name: "UserGuests", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum GuestStatus {
  NOT_INVITED
  INVITED
}

model InvitationTemplate {
  id                String            @id @default(uuid())
  name              String
  imageUrl          Json // URL to template image
  price             Float? // Template price
  template_type     template_category
  template_category String
  filter            String?
  createdAt         DateTime          @default(now())
  paymentDetails    PaymentDetails[]
  orderDetails      OrderDetails[]
}

enum template_category {
  FREE
  PREMIUM
}

model UserDataTemplate {
  userId          String
  template_id     String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventHeading    String?
  eventSubheading String?
  brideName       String?
  groomName       String?
  eventDate       DateTime
  weddingTime     String?
  weddingLocation String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

// Blog-related models from your schema
model Blog {
  id        String      @id @default(cuid())
  title     String      @unique
  tags      String[]
  content   String
  comments  Comment[]
  viewCount Int         @default(0)
  likes     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likedBy   LikedBlog[]
  authorId  String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
  authorId  String
}

model LikedBlog {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id])
  blogId String

  @@unique([userId, blogId])
}
