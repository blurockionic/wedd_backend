generator client {
  provider = "prisma-client-js"
  output   = "./generated/mongo"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_DB_DATABASE_URL")
}

model Vendor {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  business_name       String
  business_category   String
  license_number      String?
  service_type        String[]       @default([]) // Ensure default value for arrays
  description         String? // Detailed description of the business
  logo_url            Json?
  country             String?
  latitude            String?
  longitude           String?
  city                String?
  email               String         @unique
  state               String?
  password_hash       String
  phone_number        String
  social_networks     Json?
  services            Service[]      @relation("VendorServices") // One-to-many relation
  promotions          Promotion[] // One-to-many relation
  team_members        TeamMember[] // One-to-many relation
  faqs                Json?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  is_verified         Boolean        @default(false)
  refresh_Token       String?
  resetPassword_Token String?
  role                String         @default("vendor") @db.String
  payment             Payment[]
  invoices            Invoice[]
  Subscription        Subscription[]
}

model Service {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String         @db.ObjectId
  vendor         Vendor         @relation("VendorServices", fields: [vendorId], references: [id], onDelete: Cascade)
  service_name   String
  description    String?
  min_price      Float?
  max_price      Float?
  city           String?
  state          String?
  price          Float?
  service_type   String
  service_unit   String?
  status         String         @default("active")
  rating         Float          @default(0.0)
  availabilities Availability[]
  feedback       Feedback[]
  media          Media[]        @relation("ServiceToMedia")
  views          Views[]
  faqs           Json?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([service_type], map: "idx_service_type")
}

model Views {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId  String   @db.ObjectId
  userId     String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  viewCount  Int      @default(1)
  lead       Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([serviceId, userId])
  @@index([serviceId])
}

model Feedback {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique
  serviceId  String   @db.ObjectId
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  comment    String
  rating     Float
  user_name  String   @default("")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([serviceId, userId])
  @@index([serviceId]) //index for lookup
}

model Availability {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId      String   @unique @db.ObjectId
  service        Service  @relation(fields: [serviceId], references: [id])
  available_date DateTime
  wedding_date   DateTime
  is_available   Boolean
  created_at     DateTime @default(now())
}

model Media {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceId   String   @unique
  service     Service  @relation(fields: [serviceId], references: [id], name: "ServiceToMedia", onDelete: Cascade)
  image_urls  Json
  video_urls  Json
  uploaded_at DateTime @default(now())
}

model TeamMember {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId     String   @db.ObjectId
  vendor       Vendor   @relation(fields: [vendorId], references: [id])
  name         String
  position     String
  bio          String
  email        String
  photo_url    String?
  social_links Json?
  created_at   DateTime @default(now())
}

model Promotion {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String   @db.ObjectId
  vendor              Vendor   @relation(fields: [vendorId], references: [id])
  promotion_title     String
  description         String
  discount_percentage Float    @default(0)
  start_date          DateTime
  end_date            DateTime
  created_at          DateTime @default(now())
}

model Plan {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String // Name of the plan (e.g., "Basic", "Premium")
  price         Float // Monthly or yearly cost
  duration      String
  description   String // Description of the plan
  features      Json?
  trial_period  Int?
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  vendorId       String?            @db.ObjectId
  vendor         Vendor?            @relation(fields: [vendorId], references: [id])
  planId         String             @db.ObjectId
  plan           Plan               @relation(fields: [planId], references: [id])
  status         SubscriptionStatus @default(PENDING)
  order_id       String
  payment_id     String?
  payments       Payment[]
  start_date     DateTime           @default(now())
  end_date       DateTime?
  auto_renew     Boolean            @default(true)
  is_trial       Boolean            @default(false) // Indicates if this subscription is a trial
  trial_end_date DateTime? // End date for the trial period
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
}

model Payment {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  vendorId            String?       @db.ObjectId
  vendor              Vendor?       @relation(fields: [vendorId], references: [id])
  subscriptionId      String?       @db.ObjectId
  subscription        Subscription? @relation(fields: [subscriptionId], references: [id])
  amount              Float // Amount paid
  currency            String // Currency: "INR", "USD", etc.
  status              PaymentStatus @default(PENDING) // "SUCCESS", "FAILED", etc.
  payment_method      String? // "UPI", "card", etc.
  razorpay_order_id   String? // Razorpay Order ID
  razorpay_payment_id String? // Razorpay Payment ID
  refund_id           String? // Razorpay refund ID (if applicable)
  is_refunded         Boolean       @default(false)
  failure_reason      String? // If payment failed
  vpa                 String?
  fee                 Float? // Razorpay's fee (converted to the base currency)
  tax                 Float? // Tax on the transaction (converted to the base currency)
  rrn                 String? // Reference Retrieval Number (for banking transactions)
  upi_transaction_id  String? // UPI transaction ID if applicable
  email               String? // Payer's email
  contact             String? // Payer's contact number
  acquirer_data       Json? // Acquirer data from Razorpay (e.g., bank details, UPI data)
  notes               Json? // Additional notes or metadata
  autoRenew           Boolean       @default(false) // Whether this payment is for an auto-renewing subscription
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  bill_generated      Boolean       @default(false)
  invoices            Invoice[]
}

model Invoice {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber   String    @unique
  vendorId        String?   @db.ObjectId
  vendor          Vendor?   @relation(fields: [vendorId], references: [id])
  paymentId       String?   @db.ObjectId
  payment         Payment?  @relation(fields: [paymentId], references: [id])
  nextBillingDate DateTime?
  discount        Float     @default(0)
  totalExclIGST   Float
  igstAmount      Float
  igstTotal       Float
  totalAmount     Float
  amountDue       Float     @default(0)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
}

model Counter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  value Int
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
